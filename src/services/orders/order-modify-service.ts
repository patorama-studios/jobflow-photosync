
import { Order } from '@/types/order-types';
import { toast } from 'sonner';
import { orderService } from '@/services/mysql/order-service';

/**
 * Services for modifying orders in the database
 */

export const saveOrderChanges = async (order: Order): Promise<{ success: boolean, error: string | null, orderId?: string }> => {
  try {
    // Check if this is a new order (id is 'new') or updating existing order
    const isNewOrder = order.id === 'new';
    
    if (isNewOrder) {
      // Creating a new order
      return await createNewOrder(order);
    } else {
      // Updating existing order
      return await updateExistingOrder(order);
    }
  } catch (err) {
    const errorMessage = err instanceof Error ? err.message : 'An unexpected error occurred';
    console.error('Error in saveOrderChanges:', errorMessage);
    return { success: false, error: errorMessage };
  }
};

const updateExistingOrder = async (order: Order): Promise<{ success: boolean, error: string | null, orderId?: string }> => {
  try {
    console.log('ðŸ”§ updateExistingOrder: Updating order:', order.id);
    
    const updatedOrder = await orderService.updateOrder(String(order.id), order);
    
    if (updatedOrder) {
      console.log('ðŸ”§ updateExistingOrder: Order updated successfully');
      return { success: true, error: null, orderId: String(order.id) };
    } else {
      console.error('ðŸ”§ updateExistingOrder: Failed to update order');
      return { success: false, error: 'Failed to update order' };
    }
  } catch (error) {
    console.error('ðŸ”§ updateExistingOrder: Error updating order:', error);
    return { success: false, error: error instanceof Error ? error.message : 'Unknown error' };
  }
};

const createNewOrder = async (order: Order): Promise<{ success: boolean, error: string | null, orderId?: string }> => {
  try {
    console.log('ðŸ”§ createNewOrder: Creating new order');
    
    // Remove the id since it will be generated by the service
    const { id, ...orderWithoutId } = order;
    
    const createdOrder = await orderService.createOrder(orderWithoutId);
    
    if (createdOrder) {
      console.log('ðŸ”§ createNewOrder: Order created successfully:', createdOrder.id);
      return { success: true, error: null, orderId: String(createdOrder.id) };
    } else {
      console.error('ðŸ”§ createNewOrder: Failed to create order');
      return { success: false, error: 'Failed to create order' };
    }
  } catch (error) {
    console.error('ðŸ”§ createNewOrder: Error creating order:', error);
    return { success: false, error: error instanceof Error ? error.message : 'Unknown error' };
  }
};

export const createOrder = async (order: Omit<Order, 'id'>): Promise<{ success: boolean; data: Order | null; error: string | null }> => {
  try {
    console.log('ðŸ”§ createOrder: Creating order with MySQL service');
    
    const createdOrder = await orderService.createOrder(order);
    
    if (createdOrder) {
      console.log('ðŸ”§ createOrder: Order created successfully:', createdOrder.id);
      toast.success("Order created successfully");
      return { success: true, data: createdOrder, error: null };
    } else {
      console.error('ðŸ”§ createOrder: Failed to create order');
      toast.error("Failed to create order");
      return { success: false, data: null, error: 'Failed to create order' };
    }
  } catch (err) {
    const errorMessage = err instanceof Error ? err.message : 'An unexpected error occurred';
    console.error('ðŸ”§ createOrder: Error creating order:', errorMessage);
    toast.error("An unexpected error occurred while creating the order");
    return { success: false, data: null, error: errorMessage };
  }
};
